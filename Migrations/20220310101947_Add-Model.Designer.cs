// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Database;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220310101947_Add-Model")]
    partial class AddModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApi.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApi.Model.Callback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Callbacks");
                });

            modelBuilder.Entity("WebApi.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WebApi.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WebApi.Model.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebApi.Model.FileOnFileSystemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("FilesOnFileSystem");
                });

            modelBuilder.Entity("WebApi.Model.Improvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Improvements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parking",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "TV",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Refrigerator",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Washing Machine",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Balcony",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Internet",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Drying Machine",
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Private garden",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Roof Terrace",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Open kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cooker Hob & Hood",
                            Type = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Closed kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Water Heater",
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Name = "Common garden",
                            Type = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Function Room",
                            Type = 5
                        },
                        new
                        {
                            Id = 17,
                            Name = "Common jacuzzi",
                            Type = 5
                        },
                        new
                        {
                            Id = 18,
                            Name = "Lounge",
                            Type = 5
                        },
                        new
                        {
                            Id = 19,
                            Name = "Restaurant",
                            Type = 5
                        },
                        new
                        {
                            Id = 20,
                            Name = "Building security",
                            Type = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Garage",
                            Type = 5
                        },
                        new
                        {
                            Id = 22,
                            Name = "Onsen Spa",
                            Type = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Sauna",
                            Type = 5
                        },
                        new
                        {
                            Id = 24,
                            Name = "Cafe",
                            Type = 5
                        },
                        new
                        {
                            Id = 25,
                            Name = "Gym/Fitness",
                            Type = 5
                        },
                        new
                        {
                            Id = 26,
                            Name = "Library",
                            Type = 5
                        },
                        new
                        {
                            Id = 27,
                            Name = "Outdoor swimming pool",
                            Type = 5
                        },
                        new
                        {
                            Id = 28,
                            Name = "Spa",
                            Type = 5
                        },
                        new
                        {
                            Id = 29,
                            Name = "Children playroom",
                            Type = 5
                        },
                        new
                        {
                            Id = 30,
                            Name = "Indoor swimming pool",
                            Type = 5
                        },
                        new
                        {
                            Id = 31,
                            Name = "Lift",
                            Type = 5
                        },
                        new
                        {
                            Id = 32,
                            Name = "Playground",
                            Type = 5
                        },
                        new
                        {
                            Id = 33,
                            Name = "Steamroom",
                            Type = 5
                        },
                        new
                        {
                            Id = 34,
                            Name = "European",
                            Type = 3
                        },
                        new
                        {
                            Id = 35,
                            Name = "Industrial",
                            Type = 3
                        },
                        new
                        {
                            Id = 36,
                            Name = "Minimalistic",
                            Type = 3
                        },
                        new
                        {
                            Id = 37,
                            Name = "Modern",
                            Type = 3
                        },
                        new
                        {
                            Id = 38,
                            Name = "Thai",
                            Type = 3
                        },
                        new
                        {
                            Id = 39,
                            Name = "Not Decorated",
                            Type = 3
                        },
                        new
                        {
                            Id = 40,
                            Name = "Air Conditioning",
                            Type = 4
                        },
                        new
                        {
                            Id = 41,
                            Name = "Bathtub",
                            Type = 4
                        },
                        new
                        {
                            Id = 42,
                            Name = "Oven",
                            Type = 4
                        },
                        new
                        {
                            Id = 43,
                            Name = "Cooking gas",
                            Type = 4
                        },
                        new
                        {
                            Id = 44,
                            Name = "Private Pool",
                            Type = 4
                        },
                        new
                        {
                            Id = 45,
                            Name = "Fan",
                            Type = 4
                        },
                        new
                        {
                            Id = 46,
                            Name = "Stove",
                            Type = 4
                        },
                        new
                        {
                            Id = 47,
                            Name = "Goverment electricity meter",
                            Type = 7
                        },
                        new
                        {
                            Id = 48,
                            Name = "Shopping Mall",
                            Type = 7
                        },
                        new
                        {
                            Id = 49,
                            Name = "Public water meter",
                            Type = 7
                        },
                        new
                        {
                            Id = 50,
                            Name = "Golf Simulator",
                            Type = 7
                        },
                        new
                        {
                            Id = 51,
                            Name = "Co-Working Space",
                            Type = 7
                        },
                        new
                        {
                            Id = 52,
                            Name = "Cleaning service",
                            Type = 7
                        },
                        new
                        {
                            Id = 53,
                            Name = "Mini Market",
                            Type = 7
                        },
                        new
                        {
                            Id = 55,
                            Name = "Wheelchair accessible",
                            Type = 6
                        },
                        new
                        {
                            Id = 56,
                            Name = "Badminton Court",
                            Type = 6
                        },
                        new
                        {
                            Id = 57,
                            Name = "Company Registration",
                            Type = 6
                        },
                        new
                        {
                            Id = 58,
                            Name = "High Floor",
                            Type = 6
                        },
                        new
                        {
                            Id = 59,
                            Name = "Low Floor",
                            Type = 6
                        },
                        new
                        {
                            Id = 60,
                            Name = "Scenic View",
                            Type = 6
                        },
                        new
                        {
                            Id = 61,
                            Name = "BBQ Area",
                            Type = 6
                        },
                        new
                        {
                            Id = 62,
                            Name = "New Project",
                            Type = 6
                        },
                        new
                        {
                            Id = 63,
                            Name = "Pool View",
                            Type = 6
                        },
                        new
                        {
                            Id = 64,
                            Name = "Sea View",
                            Type = 6
                        },
                        new
                        {
                            Id = 65,
                            Name = "Allows Pets",
                            Type = 6
                        },
                        new
                        {
                            Id = 66,
                            Name = "Shuttle service",
                            Type = 6
                        },
                        new
                        {
                            Id = 67,
                            Name = "Jogging Track",
                            Type = 6
                        },
                        new
                        {
                            Id = 68,
                            Name = "Luxury",
                            Type = 6
                        },
                        new
                        {
                            Id = 69,
                            Name = "Park View",
                            Type = 6
                        },
                        new
                        {
                            Id = 70,
                            Name = "Rent Guarantee",
                            Type = 6
                        },
                        new
                        {
                            Id = 71,
                            Name = "Allow Short-term",
                            Type = 6
                        },
                        new
                        {
                            Id = 72,
                            Name = "City View",
                            Type = 6
                        },
                        new
                        {
                            Id = 73,
                            Name = "Lake View",
                            Type = 6
                        },
                        new
                        {
                            Id = 74,
                            Name = "Maid's Room",
                            Type = 6
                        },
                        new
                        {
                            Id = 75,
                            Name = "Penthouse",
                            Type = 6
                        },
                        new
                        {
                            Id = 76,
                            Name = "Partially Furnished",
                            Type = 1
                        },
                        new
                        {
                            Id = 77,
                            Name = "Fully Furnished",
                            Type = 1
                        },
                        new
                        {
                            Id = 78,
                            Name = "Needs renovation",
                            Type = 1
                        },
                        new
                        {
                            Id = 79,
                            Name = "Renovated",
                            Type = 1
                        },
                        new
                        {
                            Id = 80,
                            Name = "To be renovated",
                            Type = 1
                        },
                        new
                        {
                            Id = 81,
                            Name = "Unfurnished",
                            Type = 1
                        },
                        new
                        {
                            Id = 82,
                            Name = "Jacuzzi",
                            Type = 1
                        },
                        new
                        {
                            Id = 83,
                            Name = "Walk-in-Wardrobe",
                            Type = 1
                        },
                        new
                        {
                            Id = 84,
                            Name = "Maid's Room",
                            Type = 1
                        },
                        new
                        {
                            Id = 85,
                            Name = "Tennis Court",
                            Type = 1
                        });
                });

            modelBuilder.Entity("WebApi.Model.ImprovementToProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImprovementId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImprovementId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ImprovementToProperty");
                });

            modelBuilder.Entity("WebApi.Model.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"), 1L, 1);

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("WebApi.Model.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WebApi.Model.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionThai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForRent")
                        .HasColumnType("bit");

                    b.Property<bool>("ForSale")
                        .HasColumnType("bit");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LandArea")
                        .HasColumnType("float");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LivingArea")
                        .HasColumnType("float");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Parking")
                        .HasColumnType("int");

                    b.Property<double>("PriceRent")
                        .HasColumnType("float");

                    b.Property<double>("PriceSale")
                        .HasColumnType("float");

                    b.Property<double>("PriceSaleSqm")
                        .HasColumnType("float");

                    b.Property<int?>("ProjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublishingState")
                        .HasColumnType("int");

                    b.Property<int?>("StationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypePropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StationId");

                    b.HasIndex("TypePropertyId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("WebApi.Model.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.HasKey("ProvinceId");

                    b.HasIndex("StationId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("WebApi.Model.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationType")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            StationId = 1,
                            Name = "National Stadium",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 2,
                            Name = "Siam",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 3,
                            Name = "Ratchadamri",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 4,
                            Name = "Sala Daeng",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 5,
                            Name = "Surasak",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 6,
                            Name = "Saphan Taksin",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 7,
                            Name = "Krung Thon Buri",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 8,
                            Name = "Wongwian Yai",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 9,
                            Name = "Pho Nimit",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 10,
                            Name = "Talat Phlu",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 11,
                            Name = "Wutthakat",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 12,
                            Name = "Bang Wa",
                            StationType = 0
                        },
                        new
                        {
                            StationId = 13,
                            Name = "Khu Khot",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 14,
                            Name = "Yaek Kor Por Aor",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 15,
                            Name = "Royal Thai Air Force Museum",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 16,
                            Name = "Bhumibol Adulyadej Hospital",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 17,
                            Name = "Saphan Mai",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 18,
                            Name = "Sai Yud",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 19,
                            Name = "Phahon Yothin 59",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 20,
                            Name = "Wat Phra Sri Mahathat",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 21,
                            Name = "11th Infantry Regiment",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 22,
                            Name = "Bang Bua",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 23,
                            Name = "Royal Forest Department",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 24,
                            Name = "Kasetsart University",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 25,
                            Name = "Sena Nikhom",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 26,
                            Name = "Ratchayothin",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 27,
                            Name = "Phahon Yothin 24",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 28,
                            Name = "Ha Yaek Lat Phrao",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 29,
                            Name = "Mo Chit",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 30,
                            Name = "Saphan Kwai",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 31,
                            Name = "Ari",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 32,
                            Name = "Sanam Pao",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 33,
                            Name = "Victory Monument",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 34,
                            Name = "Phaya Thai",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 35,
                            Name = "Ratchathewi",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 36,
                            Name = "Chit Lom",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 37,
                            Name = "Ploen Chit",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 38,
                            Name = "Nana",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 39,
                            Name = "Asok",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 40,
                            Name = "Phrom Phong",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 41,
                            Name = "Thong Lo",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 42,
                            Name = "Ekkamai",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 43,
                            Name = "Phra Khanong",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 44,
                            Name = "On Nut",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 45,
                            Name = "Bang Chak",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 46,
                            Name = "Punnawithi",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 47,
                            Name = "Udom Suk",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 48,
                            Name = "Bang Na",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 49,
                            Name = "Bearing",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 50,
                            Name = "Samrong",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 51,
                            Name = "Pu Chao",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 52,
                            Name = "Chang Erawan",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 53,
                            Name = "Royal Thai Naval Academy",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 54,
                            Name = "Pak Nam",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 55,
                            Name = "Srinagarindra",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 56,
                            Name = "Phraek Sa",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 57,
                            Name = "Sai Luat",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 58,
                            Name = "Kheha",
                            StationType = 1
                        },
                        new
                        {
                            StationId = 59,
                            Name = "Hua Lamphong",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 60,
                            Name = "Sam Yan",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 61,
                            Name = "Si Lom",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 62,
                            Name = "Lumphini",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 63,
                            Name = "Khlong Toei",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 64,
                            Name = "Queen Sirikit National Convention Centre",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 65,
                            Name = "Sukhumvit",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 66,
                            Name = "Phetchaburi",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 67,
                            Name = "Phra Ram 9",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 68,
                            Name = "Thailand Cultural Centre",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 69,
                            Name = "Huai Khwang",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 70,
                            Name = "Sutthisan",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 71,
                            Name = "Ratchadaphisek",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 72,
                            Name = "Lat Phrao",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 73,
                            Name = "Phahon Yothin",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 75,
                            Name = "Mo Chit",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 76,
                            Name = "Kamphaeng Phet",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 77,
                            Name = "Bang Sue",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 78,
                            Name = "Hua Lamphong",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 79,
                            Name = "Tao Poon ",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 80,
                            Name = "Tha Phra",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 81,
                            Name = "Charan 13",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 82,
                            Name = "Fai Chai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 83,
                            Name = "Bang Khun Non",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 84,
                            Name = "Bang Yi Khan",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 85,
                            Name = "Sirindhorn",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 86,
                            Name = "Bang Phlat",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 87,
                            Name = "Bang O",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 88,
                            Name = "Bang Pho",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 89,
                            Name = "Wat Mangkon",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 90,
                            Name = "Sam Yot",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 91,
                            Name = "Sanam Chai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 92,
                            Name = "Itsaraphap",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 93,
                            Name = "Tha Phra",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 94,
                            Name = "Bang Phai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 95,
                            Name = "Bang Wa",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 96,
                            Name = "Phetkasem 48",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 97,
                            Name = "Phasi Charoen",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 98,
                            Name = "Bang Khae",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 99,
                            Name = "Lak Song",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 100,
                            Name = "Khlong Bang Phai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 101,
                            Name = "Talad Bang Yai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 102,
                            Name = "Sam Yaek Bang Yai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 103,
                            Name = "Bang Phlu",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 104,
                            Name = "Bang Rak Yai",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 105,
                            Name = "Bang Rak Noi Tha It",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 106,
                            Name = "Sai Ma",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 107,
                            Name = "Phra Nangklao Bridge",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 108,
                            Name = "Yaek Nonthaburi 1",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 109,
                            Name = "Bang Krasor",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 110,
                            Name = "Nonthaburi Civic Centre",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 111,
                            Name = "Ministry Of Public Health",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 112,
                            Name = "Yaek Tiwanon",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 113,
                            Name = "Wong Sawang",
                            StationType = 2
                        },
                        new
                        {
                            StationId = 114,
                            Name = "Bang Son",
                            StationType = 2
                        });
                });

            modelBuilder.Entity("WebApi.Model.TypeProperty", b =>
                {
                    b.Property<int>("TypePropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypePropertyId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypePropertyId");

                    b.ToTable("TypeProperties");

                    b.HasData(
                        new
                        {
                            TypePropertyId = 1,
                            Name = "Unspecified"
                        },
                        new
                        {
                            TypePropertyId = 2,
                            Name = "Townhouse"
                        },
                        new
                        {
                            TypePropertyId = 3,
                            Name = "House"
                        },
                        new
                        {
                            TypePropertyId = 4,
                            Name = "Condominium"
                        },
                        new
                        {
                            TypePropertyId = 5,
                            Name = "Appartment"
                        },
                        new
                        {
                            TypePropertyId = 6,
                            Name = "Office"
                        },
                        new
                        {
                            TypePropertyId = 7,
                            Name = "Land"
                        },
                        new
                        {
                            TypePropertyId = 8,
                            Name = "Penthouse"
                        },
                        new
                        {
                            TypePropertyId = 9,
                            Name = "Serviced Apartment"
                        },
                        new
                        {
                            TypePropertyId = 10,
                            Name = "Shop house"
                        },
                        new
                        {
                            TypePropertyId = 11,
                            Name = "Retail"
                        },
                        new
                        {
                            TypePropertyId = 12,
                            Name = "Business"
                        },
                        new
                        {
                            TypePropertyId = 13,
                            Name = "Factory"
                        },
                        new
                        {
                            TypePropertyId = 14,
                            Name = "Commercial Building"
                        },
                        new
                        {
                            TypePropertyId = 15,
                            Name = "Hotel / Resort"
                        },
                        new
                        {
                            TypePropertyId = 16,
                            Name = "Other Commertcial"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApi.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApi.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApi.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Model.Callback", b =>
                {
                    b.HasOne("WebApi.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("WebApi.Model.City", b =>
                {
                    b.HasOne("WebApi.Model.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("WebApi.Model.FileOnFileSystemModel", b =>
                {
                    b.HasOne("WebApi.Model.Property", null)
                        .WithMany("FileSystemModels")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Model.Improvement", b =>
                {
                    b.HasOne("WebApi.Model.Property", null)
                        .WithMany("Improvements")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("WebApi.Model.ImprovementToProperty", b =>
                {
                    b.HasOne("WebApi.Model.Improvement", "Improvement")
                        .WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Improvement");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("WebApi.Model.Property", b =>
                {
                    b.HasOne("WebApi.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.Contact", null)
                        .WithMany("Properties")
                        .HasForeignKey("ContactId");

                    b.HasOne("WebApi.Model.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.Project", "Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Model.TypeProperty", "TypeProperties")
                        .WithMany("Properties")
                        .HasForeignKey("TypePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Owner");

                    b.Navigation("Project");

                    b.Navigation("Station");

                    b.Navigation("TypeProperties");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Model.Province", b =>
                {
                    b.HasOne("WebApi.Model.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("WebApi.Model.City", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("WebApi.Model.Contact", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("WebApi.Model.Project", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("WebApi.Model.Property", b =>
                {
                    b.Navigation("FileSystemModels");

                    b.Navigation("Improvements");
                });

            modelBuilder.Entity("WebApi.Model.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WebApi.Model.TypeProperty", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
